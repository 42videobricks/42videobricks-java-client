/*
 * 42videobricks
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.api42videobricks.client.models;

import java.util.Objects;
import com.api42videobricks.client.models.VideoMultipartUploadInitResponsePartsInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.api42videobricks.client.JSON;

/**
 * Video Mutlipart Upload Init response object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:12:12.471947Z[Etc/UTC]")
public class VideoMultipartUploadInitResponse {
  public static final String SERIALIZED_NAME_CHUNK_SIZE = "chunkSize";
  @SerializedName(SERIALIZED_NAME_CHUNK_SIZE)
  private Integer chunkSize;

  public static final String SERIALIZED_NAME_FILE_ID = "fileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_FILE_KEY = "fileKey";
  @SerializedName(SERIALIZED_NAME_FILE_KEY)
  private String fileKey;

  public static final String SERIALIZED_NAME_PARTS = "parts";
  @SerializedName(SERIALIZED_NAME_PARTS)
  private List<VideoMultipartUploadInitResponsePartsInner> parts;

  public VideoMultipartUploadInitResponse() {
  }

  public VideoMultipartUploadInitResponse chunkSize(Integer chunkSize) {
    this.chunkSize = chunkSize;
    return this;
  }

   /**
   * part chunk size
   * @return chunkSize
  **/
  @javax.annotation.Nullable
  public Integer getChunkSize() {
    return chunkSize;
  }

  public void setChunkSize(Integer chunkSize) {
    this.chunkSize = chunkSize;
  }


  public VideoMultipartUploadInitResponse fileId(String fileId) {
    this.fileId = fileId;
    return this;
  }

   /**
   * file id
   * @return fileId
  **/
  @javax.annotation.Nullable
  public String getFileId() {
    return fileId;
  }

  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public VideoMultipartUploadInitResponse fileKey(String fileKey) {
    this.fileKey = fileKey;
    return this;
  }

   /**
   * file key
   * @return fileKey
  **/
  @javax.annotation.Nullable
  public String getFileKey() {
    return fileKey;
  }

  public void setFileKey(String fileKey) {
    this.fileKey = fileKey;
  }


  public VideoMultipartUploadInitResponse parts(List<VideoMultipartUploadInitResponsePartsInner> parts) {
    this.parts = parts;
    return this;
  }

  public VideoMultipartUploadInitResponse addPartsItem(VideoMultipartUploadInitResponsePartsInner partsItem) {
    if (this.parts == null) {
      this.parts = new ArrayList<>();
    }
    this.parts.add(partsItem);
    return this;
  }

   /**
   * Get parts
   * @return parts
  **/
  @javax.annotation.Nullable
  public List<VideoMultipartUploadInitResponsePartsInner> getParts() {
    return parts;
  }

  public void setParts(List<VideoMultipartUploadInitResponsePartsInner> parts) {
    this.parts = parts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoMultipartUploadInitResponse videoMultipartUploadInitResponse = (VideoMultipartUploadInitResponse) o;
    return Objects.equals(this.chunkSize, videoMultipartUploadInitResponse.chunkSize) &&
        Objects.equals(this.fileId, videoMultipartUploadInitResponse.fileId) &&
        Objects.equals(this.fileKey, videoMultipartUploadInitResponse.fileKey) &&
        Objects.equals(this.parts, videoMultipartUploadInitResponse.parts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chunkSize, fileId, fileKey, parts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoMultipartUploadInitResponse {\n");
    sb.append("    chunkSize: ").append(toIndentedString(chunkSize)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    fileKey: ").append(toIndentedString(fileKey)).append("\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chunkSize");
    openapiFields.add("fileId");
    openapiFields.add("fileKey");
    openapiFields.add("parts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VideoMultipartUploadInitResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoMultipartUploadInitResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoMultipartUploadInitResponse is not found in the empty JSON string", VideoMultipartUploadInitResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoMultipartUploadInitResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoMultipartUploadInitResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fileId") != null && !jsonObj.get("fileId").isJsonNull()) && !jsonObj.get("fileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileId").toString()));
      }
      if ((jsonObj.get("fileKey") != null && !jsonObj.get("fileKey").isJsonNull()) && !jsonObj.get("fileKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileKey").toString()));
      }
      if (jsonObj.get("parts") != null && !jsonObj.get("parts").isJsonNull()) {
        JsonArray jsonArrayparts = jsonObj.getAsJsonArray("parts");
        if (jsonArrayparts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parts` to be an array in the JSON string but got `%s`", jsonObj.get("parts").toString()));
          }

          // validate the optional field `parts` (array)
          for (int i = 0; i < jsonArrayparts.size(); i++) {
            VideoMultipartUploadInitResponsePartsInner.validateJsonElement(jsonArrayparts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoMultipartUploadInitResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoMultipartUploadInitResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoMultipartUploadInitResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoMultipartUploadInitResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoMultipartUploadInitResponse>() {
           @Override
           public void write(JsonWriter out, VideoMultipartUploadInitResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoMultipartUploadInitResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoMultipartUploadInitResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoMultipartUploadInitResponse
  * @throws IOException if the JSON string is invalid with respect to VideoMultipartUploadInitResponse
  */
  public static VideoMultipartUploadInitResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoMultipartUploadInitResponse.class);
  }

 /**
  * Convert an instance of VideoMultipartUploadInitResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

