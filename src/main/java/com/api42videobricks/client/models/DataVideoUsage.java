/*
 * 42videobricks
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.api42videobricks.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.api42videobricks.client.JSON;

/**
 * Video Usage KPIs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:12:12.471947Z[Etc/UTC]")
public class DataVideoUsage {
  public static final String SERIALIZED_NAME_DATE_KEY = "dateKey";
  @SerializedName(SERIALIZED_NAME_DATE_KEY)
  private String dateKey;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_TRANSCODING = "transcoding";
  @SerializedName(SERIALIZED_NAME_TRANSCODING)
  private BigDecimal transcoding;

  public static final String SERIALIZED_NAME_HOSTING = "hosting";
  @SerializedName(SERIALIZED_NAME_HOSTING)
  private BigDecimal hosting;

  public static final String SERIALIZED_NAME_DELIVERY = "delivery";
  @SerializedName(SERIALIZED_NAME_DELIVERY)
  private BigDecimal delivery;

  public static final String SERIALIZED_NAME_DRM = "drm";
  @SerializedName(SERIALIZED_NAME_DRM)
  private BigDecimal drm;

  public DataVideoUsage() {
  }

  public DataVideoUsage dateKey(String dateKey) {
    this.dateKey = dateKey;
    return this;
  }

   /**
   * Date of the kpis.  Format:  - day:YYYY-MM-DD (2023-10-16) - week: YYYY-Www (2023-W42) - month: YYYY-MM (2023-10)
   * @return dateKey
  **/
  @javax.annotation.Nullable
  public String getDateKey() {
    return dateKey;
  }

  public void setDateKey(String dateKey) {
    this.dateKey = dateKey;
  }


  public DataVideoUsage interval(String interval) {
    this.interval = interval;
    return this;
  }

   /**
   * Unit of the period (day|month|week)
   * @return interval
  **/
  @javax.annotation.Nullable
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }


  public DataVideoUsage transcoding(BigDecimal transcoding) {
    this.transcoding = transcoding;
    return this;
  }

   /**
   * total of transcoding second since the begining of the month
   * @return transcoding
  **/
  @javax.annotation.Nonnull
  public BigDecimal getTranscoding() {
    return transcoding;
  }

  public void setTranscoding(BigDecimal transcoding) {
    this.transcoding = transcoding;
  }


  public DataVideoUsage hosting(BigDecimal hosting) {
    this.hosting = hosting;
    return this;
  }

   /**
   * total of hosting second since the begining of the month
   * @return hosting
  **/
  @javax.annotation.Nonnull
  public BigDecimal getHosting() {
    return hosting;
  }

  public void setHosting(BigDecimal hosting) {
    this.hosting = hosting;
  }


  public DataVideoUsage delivery(BigDecimal delivery) {
    this.delivery = delivery;
    return this;
  }

   /**
   * total of delivery (stream) second since the begining of the month
   * @return delivery
  **/
  @javax.annotation.Nullable
  public BigDecimal getDelivery() {
    return delivery;
  }

  public void setDelivery(BigDecimal delivery) {
    this.delivery = delivery;
  }


  public DataVideoUsage drm(BigDecimal drm) {
    this.drm = drm;
    return this;
  }

   /**
   * total of delivery (stream) second since the begining of the month
   * @return drm
  **/
  @javax.annotation.Nullable
  public BigDecimal getDrm() {
    return drm;
  }

  public void setDrm(BigDecimal drm) {
    this.drm = drm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataVideoUsage dataVideoUsage = (DataVideoUsage) o;
    return Objects.equals(this.dateKey, dataVideoUsage.dateKey) &&
        Objects.equals(this.interval, dataVideoUsage.interval) &&
        Objects.equals(this.transcoding, dataVideoUsage.transcoding) &&
        Objects.equals(this.hosting, dataVideoUsage.hosting) &&
        Objects.equals(this.delivery, dataVideoUsage.delivery) &&
        Objects.equals(this.drm, dataVideoUsage.drm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateKey, interval, transcoding, hosting, delivery, drm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataVideoUsage {\n");
    sb.append("    dateKey: ").append(toIndentedString(dateKey)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    transcoding: ").append(toIndentedString(transcoding)).append("\n");
    sb.append("    hosting: ").append(toIndentedString(hosting)).append("\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    drm: ").append(toIndentedString(drm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateKey");
    openapiFields.add("interval");
    openapiFields.add("transcoding");
    openapiFields.add("hosting");
    openapiFields.add("delivery");
    openapiFields.add("drm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transcoding");
    openapiRequiredFields.add("hosting");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DataVideoUsage
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataVideoUsage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataVideoUsage is not found in the empty JSON string", DataVideoUsage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataVideoUsage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataVideoUsage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataVideoUsage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dateKey") != null && !jsonObj.get("dateKey").isJsonNull()) && !jsonObj.get("dateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateKey").toString()));
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataVideoUsage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataVideoUsage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataVideoUsage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataVideoUsage.class));

       return (TypeAdapter<T>) new TypeAdapter<DataVideoUsage>() {
           @Override
           public void write(JsonWriter out, DataVideoUsage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataVideoUsage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataVideoUsage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataVideoUsage
  * @throws IOException if the JSON string is invalid with respect to DataVideoUsage
  */
  public static DataVideoUsage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataVideoUsage.class);
  }

 /**
  * Convert an instance of DataVideoUsage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

