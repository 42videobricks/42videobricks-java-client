/*
 * 42videobricks
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.api42videobricks.client.api;

import com.api42videobricks.client.ApiCallback;
import com.api42videobricks.client.ApiClient;
import com.api42videobricks.client.ApiException;
import com.api42videobricks.client.ApiResponse;
import com.api42videobricks.client.Configuration;
import com.api42videobricks.client.Pair;
import com.api42videobricks.client.ProgressRequestBody;
import com.api42videobricks.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.api42videobricks.client.models.Error;
import com.api42videobricks.client.models.Playlist;
import com.api42videobricks.client.models.PlaylistList;
import com.api42videobricks.client.models.PlaylistProperties;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaylistsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlaylistsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaylistsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addPlaylist
     * @param playlistProperties  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Playlist Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPlaylistCall(PlaylistProperties playlistProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = playlistProperties;

        // create path and map variables
        String localVarPath = "/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPlaylistValidateBeforeCall(PlaylistProperties playlistProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistProperties' is set
        if (playlistProperties == null) {
            throw new ApiException("Missing the required parameter 'playlistProperties' when calling addPlaylist(Async)");
        }

        return addPlaylistCall(playlistProperties, _callback);

    }

    /**
     * Add a new playlist
     * Create a new playlist.
     * @param playlistProperties  (required)
     * @return Playlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Playlist Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Playlist addPlaylist(PlaylistProperties playlistProperties) throws ApiException {
        ApiResponse<Playlist> localVarResp = addPlaylistWithHttpInfo(playlistProperties);
        return localVarResp.getData();
    }

    /**
     * Add a new playlist
     * Create a new playlist.
     * @param playlistProperties  (required)
     * @return ApiResponse&lt;Playlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Playlist Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Playlist> addPlaylistWithHttpInfo(PlaylistProperties playlistProperties) throws ApiException {
        okhttp3.Call localVarCall = addPlaylistValidateBeforeCall(playlistProperties, null);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new playlist (asynchronously)
     * Create a new playlist.
     * @param playlistProperties  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Playlist Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPlaylistAsync(PlaylistProperties playlistProperties, final ApiCallback<Playlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPlaylistValidateBeforeCall(playlistProperties, _callback);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePlaylistById
     * @param playlistId Id of the playlist (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Playlist Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePlaylistByIdCall(String playlistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlistId}"
            .replace("{" + "playlistId" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePlaylistByIdValidateBeforeCall(String playlistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling deletePlaylistById(Async)");
        }

        return deletePlaylistByIdCall(playlistId, _callback);

    }

    /**
     * Delete a playlist
     * Delete a playlist.
     * @param playlistId Id of the playlist (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Playlist Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deletePlaylistById(String playlistId) throws ApiException {
        deletePlaylistByIdWithHttpInfo(playlistId);
    }

    /**
     * Delete a playlist
     * Delete a playlist.
     * @param playlistId Id of the playlist (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Playlist Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePlaylistByIdWithHttpInfo(String playlistId) throws ApiException {
        okhttp3.Call localVarCall = deletePlaylistByIdValidateBeforeCall(playlistId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a playlist (asynchronously)
     * Delete a playlist.
     * @param playlistId Id of the playlist (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Playlist Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePlaylistByIdAsync(String playlistId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePlaylistByIdValidateBeforeCall(playlistId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlaylistById
     * @param playlistId Id of the playlist (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested playlist </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistByIdCall(String playlistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlistId}"
            .replace("{" + "playlistId" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistByIdValidateBeforeCall(String playlistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylistById(Async)");
        }

        return getPlaylistByIdCall(playlistId, _callback);

    }

    /**
     * Retun a single playlist
     * 
     * @param playlistId Id of the playlist (required)
     * @return Playlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested playlist </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Playlist getPlaylistById(String playlistId) throws ApiException {
        ApiResponse<Playlist> localVarResp = getPlaylistByIdWithHttpInfo(playlistId);
        return localVarResp.getData();
    }

    /**
     * Retun a single playlist
     * 
     * @param playlistId Id of the playlist (required)
     * @return ApiResponse&lt;Playlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested playlist </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Playlist> getPlaylistByIdWithHttpInfo(String playlistId) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistByIdValidateBeforeCall(playlistId, null);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retun a single playlist (asynchronously)
     * 
     * @param playlistId Id of the playlist (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested playlist </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistByIdAsync(String playlistId, final ApiCallback<Playlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistByIdValidateBeforeCall(playlistId, _callback);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlaylists
     * @param limit Number of elements to return (default&#x3D;10) (optional)
     * @param offset offset for pagination (optional)
     * @param search Keywords search in all indexed fields (optional)
     * @param sort Sorting results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of playlists </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistsCall(Integer limit, Integer offset, String search, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistsValidateBeforeCall(Integer limit, Integer offset, String search, String sort, final ApiCallback _callback) throws ApiException {
        return getPlaylistsCall(limit, offset, search, sort, _callback);

    }

    /**
     * List playlists
     * Return the list of playlist.  Return an empty list it there is no playlist to return.
     * @param limit Number of elements to return (default&#x3D;10) (optional)
     * @param offset offset for pagination (optional)
     * @param search Keywords search in all indexed fields (optional)
     * @param sort Sorting results (optional)
     * @return PlaylistList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of playlists </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PlaylistList getPlaylists(Integer limit, Integer offset, String search, String sort) throws ApiException {
        ApiResponse<PlaylistList> localVarResp = getPlaylistsWithHttpInfo(limit, offset, search, sort);
        return localVarResp.getData();
    }

    /**
     * List playlists
     * Return the list of playlist.  Return an empty list it there is no playlist to return.
     * @param limit Number of elements to return (default&#x3D;10) (optional)
     * @param offset offset for pagination (optional)
     * @param search Keywords search in all indexed fields (optional)
     * @param sort Sorting results (optional)
     * @return ApiResponse&lt;PlaylistList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of playlists </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaylistList> getPlaylistsWithHttpInfo(Integer limit, Integer offset, String search, String sort) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistsValidateBeforeCall(limit, offset, search, sort, null);
        Type localVarReturnType = new TypeToken<PlaylistList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List playlists (asynchronously)
     * Return the list of playlist.  Return an empty list it there is no playlist to return.
     * @param limit Number of elements to return (default&#x3D;10) (optional)
     * @param offset offset for pagination (optional)
     * @param search Keywords search in all indexed fields (optional)
     * @param sort Sorting results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of playlists </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistsAsync(Integer limit, Integer offset, String search, String sort, final ApiCallback<PlaylistList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistsValidateBeforeCall(limit, offset, search, sort, _callback);
        Type localVarReturnType = new TypeToken<PlaylistList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePlaylistById
     * @param playlistId Id of the playlist (required)
     * @param playlistProperties  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Video update accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePlaylistByIdCall(String playlistId, PlaylistProperties playlistProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = playlistProperties;

        // create path and map variables
        String localVarPath = "/playlists/{playlistId}"
            .replace("{" + "playlistId" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlaylistByIdValidateBeforeCall(String playlistId, PlaylistProperties playlistProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling updatePlaylistById(Async)");
        }

        // verify the required parameter 'playlistProperties' is set
        if (playlistProperties == null) {
            throw new ApiException("Missing the required parameter 'playlistProperties' when calling updatePlaylistById(Async)");
        }

        return updatePlaylistByIdCall(playlistId, playlistProperties, _callback);

    }

    /**
     * Update an existing playlist
     * Update a existing playlist.
     * @param playlistId Id of the playlist (required)
     * @param playlistProperties  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Video update accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void updatePlaylistById(String playlistId, PlaylistProperties playlistProperties) throws ApiException {
        updatePlaylistByIdWithHttpInfo(playlistId, playlistProperties);
    }

    /**
     * Update an existing playlist
     * Update a existing playlist.
     * @param playlistId Id of the playlist (required)
     * @param playlistProperties  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Video update accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatePlaylistByIdWithHttpInfo(String playlistId, PlaylistProperties playlistProperties) throws ApiException {
        okhttp3.Call localVarCall = updatePlaylistByIdValidateBeforeCall(playlistId, playlistProperties, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an existing playlist (asynchronously)
     * Update a existing playlist.
     * @param playlistId Id of the playlist (required)
     * @param playlistProperties  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Video update accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePlaylistByIdAsync(String playlistId, PlaylistProperties playlistProperties, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlaylistByIdValidateBeforeCall(playlistId, playlistProperties, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
