/*
 * 42videobricks
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.api42videobricks.client.api;

import com.api42videobricks.client.ApiCallback;
import com.api42videobricks.client.ApiClient;
import com.api42videobricks.client.ApiException;
import com.api42videobricks.client.ApiResponse;
import com.api42videobricks.client.Configuration;
import com.api42videobricks.client.Pair;
import com.api42videobricks.client.ProgressRequestBody;
import com.api42videobricks.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.api42videobricks.client.models.Error;
import java.io.File;
import com.api42videobricks.client.models.Video;
import com.api42videobricks.client.models.VideoAttachmentList;
import com.api42videobricks.client.models.VideoList;
import com.api42videobricks.client.models.VideoMultipartUploadFinalize;
import com.api42videobricks.client.models.VideoMultipartUploadInit;
import com.api42videobricks.client.models.VideoMultipartUploadInitResponse;
import com.api42videobricks.client.models.VideoProperties;
import com.api42videobricks.client.models.VideoUploadInitResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAttachmentByVideoId
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @param _file The file to upload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> File Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAttachmentByVideoIdCall(String videoId, String attachmentType, String locale, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/attachments/{attachmentType}/{locale}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "attachmentType" + "}", localVarApiClient.escapeString(attachmentType.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAttachmentByVideoIdValidateBeforeCall(String videoId, String attachmentType, String locale, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addAttachmentByVideoId(Async)");
        }

        // verify the required parameter 'attachmentType' is set
        if (attachmentType == null) {
            throw new ApiException("Missing the required parameter 'attachmentType' when calling addAttachmentByVideoId(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling addAttachmentByVideoId(Async)");
        }

        return addAttachmentByVideoIdCall(videoId, attachmentType, locale, _file, _callback);

    }

    /**
     * Upload an attachement
     * Upload an attachement file and attached it to a video Currently: - attachement file type is limited to \&quot;subtitle\&quot; and \&quot;caption\&quot; (close caption) - supported file types: SRT (text/plain), VTT (text/vtt)
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @param _file The file to upload (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> File Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void addAttachmentByVideoId(String videoId, String attachmentType, String locale, File _file) throws ApiException {
        addAttachmentByVideoIdWithHttpInfo(videoId, attachmentType, locale, _file);
    }

    /**
     * Upload an attachement
     * Upload an attachement file and attached it to a video Currently: - attachement file type is limited to \&quot;subtitle\&quot; and \&quot;caption\&quot; (close caption) - supported file types: SRT (text/plain), VTT (text/vtt)
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @param _file The file to upload (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> File Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addAttachmentByVideoIdWithHttpInfo(String videoId, String attachmentType, String locale, File _file) throws ApiException {
        okhttp3.Call localVarCall = addAttachmentByVideoIdValidateBeforeCall(videoId, attachmentType, locale, _file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload an attachement (asynchronously)
     * Upload an attachement file and attached it to a video Currently: - attachement file type is limited to \&quot;subtitle\&quot; and \&quot;caption\&quot; (close caption) - supported file types: SRT (text/plain), VTT (text/vtt)
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @param _file The file to upload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> File Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAttachmentByVideoIdAsync(String videoId, String attachmentType, String locale, File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAttachmentByVideoIdValidateBeforeCall(videoId, attachmentType, locale, _file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addThumbnailByVideoId
     * @param videoId Id of the video (required)
     * @param _file The file to upload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image file accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addThumbnailByVideoIdCall(String videoId, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/thumbnail"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addThumbnailByVideoIdValidateBeforeCall(String videoId, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addThumbnailByVideoId(Async)");
        }

        return addThumbnailByVideoIdCall(videoId, _file, _callback);

    }

    /**
     * Upload a thumbnail
     * Upload an image file and set it as Thumbnail to the video
     * @param videoId Id of the video (required)
     * @param _file The file to upload (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image file accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void addThumbnailByVideoId(String videoId, File _file) throws ApiException {
        addThumbnailByVideoIdWithHttpInfo(videoId, _file);
    }

    /**
     * Upload a thumbnail
     * Upload an image file and set it as Thumbnail to the video
     * @param videoId Id of the video (required)
     * @param _file The file to upload (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image file accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addThumbnailByVideoIdWithHttpInfo(String videoId, File _file) throws ApiException {
        okhttp3.Call localVarCall = addThumbnailByVideoIdValidateBeforeCall(videoId, _file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload a thumbnail (asynchronously)
     * Upload an image file and set it as Thumbnail to the video
     * @param videoId Id of the video (required)
     * @param _file The file to upload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image file accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addThumbnailByVideoIdAsync(String videoId, File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addThumbnailByVideoIdValidateBeforeCall(videoId, _file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVideo
     * @param videoProperties  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Video Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoCall(VideoProperties videoProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videoProperties;

        // create path and map variables
        String localVarPath = "/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoValidateBeforeCall(VideoProperties videoProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoProperties' is set
        if (videoProperties == null) {
            throw new ApiException("Missing the required parameter 'videoProperties' when calling addVideo(Async)");
        }

        return addVideoCall(videoProperties, _callback);

    }

    /**
     * Add a new video
     * You can create a video object by using this endpoint.  Once the video is created you can then upload the video.
     * @param videoProperties  (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Video Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Video addVideo(VideoProperties videoProperties) throws ApiException {
        ApiResponse<Video> localVarResp = addVideoWithHttpInfo(videoProperties);
        return localVarResp.getData();
    }

    /**
     * Add a new video
     * You can create a video object by using this endpoint.  Once the video is created you can then upload the video.
     * @param videoProperties  (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Video Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> addVideoWithHttpInfo(VideoProperties videoProperties) throws ApiException {
        okhttp3.Call localVarCall = addVideoValidateBeforeCall(videoProperties, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new video (asynchronously)
     * You can create a video object by using this endpoint.  Once the video is created you can then upload the video.
     * @param videoProperties  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Video Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoAsync(VideoProperties videoProperties, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoValidateBeforeCall(videoProperties, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAttachmentByVideoId
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> empty content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttachmentByVideoIdCall(String videoId, String attachmentType, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/attachments/{attachmentType}/{locale}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "attachmentType" + "}", localVarApiClient.escapeString(attachmentType.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttachmentByVideoIdValidateBeforeCall(String videoId, String attachmentType, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteAttachmentByVideoId(Async)");
        }

        // verify the required parameter 'attachmentType' is set
        if (attachmentType == null) {
            throw new ApiException("Missing the required parameter 'attachmentType' when calling deleteAttachmentByVideoId(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling deleteAttachmentByVideoId(Async)");
        }

        return deleteAttachmentByVideoIdCall(videoId, attachmentType, locale, _callback);

    }

    /**
     * Delete an attachment
     * Delete an attachment (and the attached file)
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> empty content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAttachmentByVideoId(String videoId, String attachmentType, String locale) throws ApiException {
        deleteAttachmentByVideoIdWithHttpInfo(videoId, attachmentType, locale);
    }

    /**
     * Delete an attachment
     * Delete an attachment (and the attached file)
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> empty content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAttachmentByVideoIdWithHttpInfo(String videoId, String attachmentType, String locale) throws ApiException {
        okhttp3.Call localVarCall = deleteAttachmentByVideoIdValidateBeforeCall(videoId, attachmentType, locale, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an attachment (asynchronously)
     * Delete an attachment (and the attached file)
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> empty content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttachmentByVideoIdAsync(String videoId, String attachmentType, String locale, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttachmentByVideoIdValidateBeforeCall(videoId, attachmentType, locale, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteThumbnailByVideoId
     * @param videoId Id of the video (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Thumbnail deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteThumbnailByVideoIdCall(String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/thumbnail"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThumbnailByVideoIdValidateBeforeCall(String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteThumbnailByVideoId(Async)");
        }

        return deleteThumbnailByVideoIdCall(videoId, _callback);

    }

    /**
     * Delete a thumbnail
     * 
     * @param videoId Id of the video (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Thumbnail deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteThumbnailByVideoId(String videoId) throws ApiException {
        deleteThumbnailByVideoIdWithHttpInfo(videoId);
    }

    /**
     * Delete a thumbnail
     * 
     * @param videoId Id of the video (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Thumbnail deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteThumbnailByVideoIdWithHttpInfo(String videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteThumbnailByVideoIdValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a thumbnail (asynchronously)
     * 
     * @param videoId Id of the video (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Thumbnail deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteThumbnailByVideoIdAsync(String videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThumbnailByVideoIdValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideoById
     * @param videoId Id of the video (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Video Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoByIdCall(String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoByIdValidateBeforeCall(String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteVideoById(Async)");
        }

        return deleteVideoByIdCall(videoId, _callback);

    }

    /**
     * Delete a video
     * 
     * @param videoId Id of the video (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Video Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVideoById(String videoId) throws ApiException {
        deleteVideoByIdWithHttpInfo(videoId);
    }

    /**
     * Delete a video
     * 
     * @param videoId Id of the video (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Video Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoByIdWithHttpInfo(String videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoByIdValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a video (asynchronously)
     * 
     * @param videoId Id of the video (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Video Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoByIdAsync(String videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoByIdValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for finalizeMultipartUploadVideoById
     * @param videoId Id of the video (required)
     * @param videoMultipartUploadFinalize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Upload Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finalizeMultipartUploadVideoByIdCall(String videoId, VideoMultipartUploadFinalize videoMultipartUploadFinalize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videoMultipartUploadFinalize;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/multipart-upload/finalize"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finalizeMultipartUploadVideoByIdValidateBeforeCall(String videoId, VideoMultipartUploadFinalize videoMultipartUploadFinalize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling finalizeMultipartUploadVideoById(Async)");
        }

        return finalizeMultipartUploadVideoByIdCall(videoId, videoMultipartUploadFinalize, _callback);

    }

    /**
     * Multipart upload finalization
     * Once video parts are uploaded, finalize the upload by requesting to transcode the file.  New video file is replacing previous video file.
     * @param videoId Id of the video (required)
     * @param videoMultipartUploadFinalize  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Upload Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void finalizeMultipartUploadVideoById(String videoId, VideoMultipartUploadFinalize videoMultipartUploadFinalize) throws ApiException {
        finalizeMultipartUploadVideoByIdWithHttpInfo(videoId, videoMultipartUploadFinalize);
    }

    /**
     * Multipart upload finalization
     * Once video parts are uploaded, finalize the upload by requesting to transcode the file.  New video file is replacing previous video file.
     * @param videoId Id of the video (required)
     * @param videoMultipartUploadFinalize  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Upload Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> finalizeMultipartUploadVideoByIdWithHttpInfo(String videoId, VideoMultipartUploadFinalize videoMultipartUploadFinalize) throws ApiException {
        okhttp3.Call localVarCall = finalizeMultipartUploadVideoByIdValidateBeforeCall(videoId, videoMultipartUploadFinalize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Multipart upload finalization (asynchronously)
     * Once video parts are uploaded, finalize the upload by requesting to transcode the file.  New video file is replacing previous video file.
     * @param videoId Id of the video (required)
     * @param videoMultipartUploadFinalize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Upload Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finalizeMultipartUploadVideoByIdAsync(String videoId, VideoMultipartUploadFinalize videoMultipartUploadFinalize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = finalizeMultipartUploadVideoByIdValidateBeforeCall(videoId, videoMultipartUploadFinalize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for finalizeUploadVideoById
     * @param videoId Id of the video (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Upload Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finalizeUploadVideoByIdCall(String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/upload/finalize"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finalizeUploadVideoByIdValidateBeforeCall(String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling finalizeUploadVideoById(Async)");
        }

        return finalizeUploadVideoByIdCall(videoId, _callback);

    }

    /**
     * Single file upload finalization
     * Once video file is uploaded, finalize the upload by requesting to transcode the file. Finalize apply to the last signedurl provided by the upload initialization.  New video file is replacing previous video file.
     * @param videoId Id of the video (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Upload Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void finalizeUploadVideoById(String videoId) throws ApiException {
        finalizeUploadVideoByIdWithHttpInfo(videoId);
    }

    /**
     * Single file upload finalization
     * Once video file is uploaded, finalize the upload by requesting to transcode the file. Finalize apply to the last signedurl provided by the upload initialization.  New video file is replacing previous video file.
     * @param videoId Id of the video (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Upload Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> finalizeUploadVideoByIdWithHttpInfo(String videoId) throws ApiException {
        okhttp3.Call localVarCall = finalizeUploadVideoByIdValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Single file upload finalization (asynchronously)
     * Once video file is uploaded, finalize the upload by requesting to transcode the file. Finalize apply to the last signedurl provided by the upload initialization.  New video file is replacing previous video file.
     * @param videoId Id of the video (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Upload Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finalizeUploadVideoByIdAsync(String videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = finalizeUploadVideoByIdValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttachmentByVideoId
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> video attachement object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentByVideoIdCall(String videoId, String attachmentType, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/attachments/{attachmentType}/{locale}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "attachmentType" + "}", localVarApiClient.escapeString(attachmentType.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentByVideoIdValidateBeforeCall(String videoId, String attachmentType, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAttachmentByVideoId(Async)");
        }

        // verify the required parameter 'attachmentType' is set
        if (attachmentType == null) {
            throw new ApiException("Missing the required parameter 'attachmentType' when calling getAttachmentByVideoId(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling getAttachmentByVideoId(Async)");
        }

        return getAttachmentByVideoIdCall(videoId, attachmentType, locale, _callback);

    }

    /**
     * Get the attachment
     * Get a video attachement object
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> video attachement object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void getAttachmentByVideoId(String videoId, String attachmentType, String locale) throws ApiException {
        getAttachmentByVideoIdWithHttpInfo(videoId, attachmentType, locale);
    }

    /**
     * Get the attachment
     * Get a video attachement object
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> video attachement object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getAttachmentByVideoIdWithHttpInfo(String videoId, String attachmentType, String locale) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentByVideoIdValidateBeforeCall(videoId, attachmentType, locale, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the attachment (asynchronously)
     * Get a video attachement object
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> video attachement object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentByVideoIdAsync(String videoId, String attachmentType, String locale, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentByVideoIdValidateBeforeCall(videoId, attachmentType, locale, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttachmentFileByVideoId
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachement file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentFileByVideoIdCall(String videoId, String attachmentType, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/attachments/{attachmentType}/{locale}/file"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "attachmentType" + "}", localVarApiClient.escapeString(attachmentType.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentFileByVideoIdValidateBeforeCall(String videoId, String attachmentType, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAttachmentFileByVideoId(Async)");
        }

        // verify the required parameter 'attachmentType' is set
        if (attachmentType == null) {
            throw new ApiException("Missing the required parameter 'attachmentType' when calling getAttachmentFileByVideoId(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling getAttachmentFileByVideoId(Async)");
        }

        return getAttachmentFileByVideoIdCall(videoId, attachmentType, locale, _callback);

    }

    /**
     * Get attachement file
     * Get the attachement file Currently only text/plain files are handled.
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachement file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void getAttachmentFileByVideoId(String videoId, String attachmentType, String locale) throws ApiException {
        getAttachmentFileByVideoIdWithHttpInfo(videoId, attachmentType, locale);
    }

    /**
     * Get attachement file
     * Get the attachement file Currently only text/plain files are handled.
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachement file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getAttachmentFileByVideoIdWithHttpInfo(String videoId, String attachmentType, String locale) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentFileByVideoIdValidateBeforeCall(videoId, attachmentType, locale, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get attachement file (asynchronously)
     * Get the attachement file Currently only text/plain files are handled.
     * @param videoId Id of the video (required)
     * @param attachmentType Type of attachment (required)
     * @param locale Le locale value of the attachment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachement file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentFileByVideoIdAsync(String videoId, String attachmentType, String locale, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentFileByVideoIdValidateBeforeCall(videoId, attachmentType, locale, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttachmentsByVideoId
     * @param videoId Id of the video (required)
     * @param attachmentType The type of attachments (optional)
     * @param locale The locale (optional)
     * @param limit Number of elements to return (default&#x3D;10) (optional)
     * @param offset offset for pagination (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of attachments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentsByVideoIdCall(String videoId, String attachmentType, String locale, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/attachments"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachmentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachmentType", attachmentType));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentsByVideoIdValidateBeforeCall(String videoId, String attachmentType, String locale, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAttachmentsByVideoId(Async)");
        }

        return getAttachmentsByVideoIdCall(videoId, attachmentType, locale, limit, offset, _callback);

    }

    /**
     * List of attachments
     * Return a list of attachments to a videos
     * @param videoId Id of the video (required)
     * @param attachmentType The type of attachments (optional)
     * @param locale The locale (optional)
     * @param limit Number of elements to return (default&#x3D;10) (optional)
     * @param offset offset for pagination (optional)
     * @return VideoAttachmentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of attachments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public VideoAttachmentList getAttachmentsByVideoId(String videoId, String attachmentType, String locale, Integer limit, Integer offset) throws ApiException {
        ApiResponse<VideoAttachmentList> localVarResp = getAttachmentsByVideoIdWithHttpInfo(videoId, attachmentType, locale, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List of attachments
     * Return a list of attachments to a videos
     * @param videoId Id of the video (required)
     * @param attachmentType The type of attachments (optional)
     * @param locale The locale (optional)
     * @param limit Number of elements to return (default&#x3D;10) (optional)
     * @param offset offset for pagination (optional)
     * @return ApiResponse&lt;VideoAttachmentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of attachments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoAttachmentList> getAttachmentsByVideoIdWithHttpInfo(String videoId, String attachmentType, String locale, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentsByVideoIdValidateBeforeCall(videoId, attachmentType, locale, limit, offset, null);
        Type localVarReturnType = new TypeToken<VideoAttachmentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of attachments (asynchronously)
     * Return a list of attachments to a videos
     * @param videoId Id of the video (required)
     * @param attachmentType The type of attachments (optional)
     * @param locale The locale (optional)
     * @param limit Number of elements to return (default&#x3D;10) (optional)
     * @param offset offset for pagination (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of attachments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentsByVideoIdAsync(String videoId, String attachmentType, String locale, Integer limit, Integer offset, final ApiCallback<VideoAttachmentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentsByVideoIdValidateBeforeCall(videoId, attachmentType, locale, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<VideoAttachmentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoById
     * @param videoId Id of the video (required)
     * @param token add a token to assets to alloaw access to private video (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested Video </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoByIdCall(String videoId, Boolean token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoByIdValidateBeforeCall(String videoId, Boolean token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoById(Async)");
        }

        return getVideoByIdCall(videoId, token, _callback);

    }

    /**
     * Retun a single video
     * 
     * @param videoId Id of the video (required)
     * @param token add a token to assets to alloaw access to private video (optional)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested Video </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Video getVideoById(String videoId, Boolean token) throws ApiException {
        ApiResponse<Video> localVarResp = getVideoByIdWithHttpInfo(videoId, token);
        return localVarResp.getData();
    }

    /**
     * Retun a single video
     * 
     * @param videoId Id of the video (required)
     * @param token add a token to assets to alloaw access to private video (optional)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested Video </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> getVideoByIdWithHttpInfo(String videoId, Boolean token) throws ApiException {
        okhttp3.Call localVarCall = getVideoByIdValidateBeforeCall(videoId, token, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retun a single video (asynchronously)
     * 
     * @param videoId Id of the video (required)
     * @param token add a token to assets to alloaw access to private video (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested Video </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoByIdAsync(String videoId, Boolean token, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoByIdValidateBeforeCall(videoId, token, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideos
     * @param limit Number of elements to return (default&#x3D;10) (optional)
     * @param offset offset for pagination (optional)
     * @param search Keywords search in all indexed fields (optional)
     * @param sort Sorting results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Videos </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideosCall(Integer limit, Integer offset, String search, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideosValidateBeforeCall(Integer limit, Integer offset, String search, String sort, final ApiCallback _callback) throws ApiException {
        return getVideosCall(limit, offset, search, sort, _callback);

    }

    /**
     * List videos
     * Return the list of videos.  Return an empty list it there is no video to return.
     * @param limit Number of elements to return (default&#x3D;10) (optional)
     * @param offset offset for pagination (optional)
     * @param search Keywords search in all indexed fields (optional)
     * @param sort Sorting results (optional)
     * @return VideoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Videos </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public VideoList getVideos(Integer limit, Integer offset, String search, String sort) throws ApiException {
        ApiResponse<VideoList> localVarResp = getVideosWithHttpInfo(limit, offset, search, sort);
        return localVarResp.getData();
    }

    /**
     * List videos
     * Return the list of videos.  Return an empty list it there is no video to return.
     * @param limit Number of elements to return (default&#x3D;10) (optional)
     * @param offset offset for pagination (optional)
     * @param search Keywords search in all indexed fields (optional)
     * @param sort Sorting results (optional)
     * @return ApiResponse&lt;VideoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Videos </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoList> getVideosWithHttpInfo(Integer limit, Integer offset, String search, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVideosValidateBeforeCall(limit, offset, search, sort, null);
        Type localVarReturnType = new TypeToken<VideoList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List videos (asynchronously)
     * Return the list of videos.  Return an empty list it there is no video to return.
     * @param limit Number of elements to return (default&#x3D;10) (optional)
     * @param offset offset for pagination (optional)
     * @param search Keywords search in all indexed fields (optional)
     * @param sort Sorting results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Videos </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideosAsync(Integer limit, Integer offset, String search, String sort, final ApiCallback<VideoList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideosValidateBeforeCall(limit, offset, search, sort, _callback);
        Type localVarReturnType = new TypeToken<VideoList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initMultipartUploadVideoById
     * @param videoId Id of the video (required)
     * @param videoMultipartUploadInit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of signed urls to post parts of the video to upload </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initMultipartUploadVideoByIdCall(String videoId, VideoMultipartUploadInit videoMultipartUploadInit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videoMultipartUploadInit;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/multipart-upload/init"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initMultipartUploadVideoByIdValidateBeforeCall(String videoId, VideoMultipartUploadInit videoMultipartUploadInit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling initMultipartUploadVideoById(Async)");
        }

        return initMultipartUploadVideoByIdCall(videoId, videoMultipartUploadInit, _callback);

    }

    /**
     * Multipart upload intialization
     * Get signed urls to upload a big file split in multiparts Once the video is uploaded, do not forget to call the multipart upload finalize  New video file is replacing previous video file.
     * @param videoId Id of the video (required)
     * @param videoMultipartUploadInit  (optional)
     * @return VideoMultipartUploadInitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of signed urls to post parts of the video to upload </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public VideoMultipartUploadInitResponse initMultipartUploadVideoById(String videoId, VideoMultipartUploadInit videoMultipartUploadInit) throws ApiException {
        ApiResponse<VideoMultipartUploadInitResponse> localVarResp = initMultipartUploadVideoByIdWithHttpInfo(videoId, videoMultipartUploadInit);
        return localVarResp.getData();
    }

    /**
     * Multipart upload intialization
     * Get signed urls to upload a big file split in multiparts Once the video is uploaded, do not forget to call the multipart upload finalize  New video file is replacing previous video file.
     * @param videoId Id of the video (required)
     * @param videoMultipartUploadInit  (optional)
     * @return ApiResponse&lt;VideoMultipartUploadInitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of signed urls to post parts of the video to upload </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoMultipartUploadInitResponse> initMultipartUploadVideoByIdWithHttpInfo(String videoId, VideoMultipartUploadInit videoMultipartUploadInit) throws ApiException {
        okhttp3.Call localVarCall = initMultipartUploadVideoByIdValidateBeforeCall(videoId, videoMultipartUploadInit, null);
        Type localVarReturnType = new TypeToken<VideoMultipartUploadInitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Multipart upload intialization (asynchronously)
     * Get signed urls to upload a big file split in multiparts Once the video is uploaded, do not forget to call the multipart upload finalize  New video file is replacing previous video file.
     * @param videoId Id of the video (required)
     * @param videoMultipartUploadInit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of signed urls to post parts of the video to upload </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initMultipartUploadVideoByIdAsync(String videoId, VideoMultipartUploadInit videoMultipartUploadInit, final ApiCallback<VideoMultipartUploadInitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = initMultipartUploadVideoByIdValidateBeforeCall(videoId, videoMultipartUploadInit, _callback);
        Type localVarReturnType = new TypeToken<VideoMultipartUploadInitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initUploadVideoById
     * @param videoId Id of the video (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Signed url to post the video file to upload </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initUploadVideoByIdCall(String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{videoId}/upload/init"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initUploadVideoByIdValidateBeforeCall(String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling initUploadVideoById(Async)");
        }

        return initUploadVideoByIdCall(videoId, _callback);

    }

    /**
     * Single file upload intialization
     * Get a single signed url to upload a file Once the video is uploaded, do not forget to call the single upload finalize  File formats currently supported: avi, mov, mp4, mpeg, mpg, mxf, ts. New video file is replacing previous video file.
     * @param videoId Id of the video (required)
     * @return VideoUploadInitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Signed url to post the video file to upload </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public VideoUploadInitResponse initUploadVideoById(String videoId) throws ApiException {
        ApiResponse<VideoUploadInitResponse> localVarResp = initUploadVideoByIdWithHttpInfo(videoId);
        return localVarResp.getData();
    }

    /**
     * Single file upload intialization
     * Get a single signed url to upload a file Once the video is uploaded, do not forget to call the single upload finalize  File formats currently supported: avi, mov, mp4, mpeg, mpg, mxf, ts. New video file is replacing previous video file.
     * @param videoId Id of the video (required)
     * @return ApiResponse&lt;VideoUploadInitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Signed url to post the video file to upload </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoUploadInitResponse> initUploadVideoByIdWithHttpInfo(String videoId) throws ApiException {
        okhttp3.Call localVarCall = initUploadVideoByIdValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<VideoUploadInitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single file upload intialization (asynchronously)
     * Get a single signed url to upload a file Once the video is uploaded, do not forget to call the single upload finalize  File formats currently supported: avi, mov, mp4, mpeg, mpg, mxf, ts. New video file is replacing previous video file.
     * @param videoId Id of the video (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Signed url to post the video file to upload </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initUploadVideoByIdAsync(String videoId, final ApiCallback<VideoUploadInitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = initUploadVideoByIdValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<VideoUploadInitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVideoById
     * @param videoId Id of the video (required)
     * @param videoProperties  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Video update accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVideoByIdCall(String videoId, VideoProperties videoProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videoProperties;

        // create path and map variables
        String localVarPath = "/videos/{videoId}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVideoByIdValidateBeforeCall(String videoId, VideoProperties videoProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling updateVideoById(Async)");
        }

        // verify the required parameter 'videoProperties' is set
        if (videoProperties == null) {
            throw new ApiException("Missing the required parameter 'videoProperties' when calling updateVideoById(Async)");
        }

        return updateVideoByIdCall(videoId, videoProperties, _callback);

    }

    /**
     * Update an existing video
     * Update video properties  Only properties provided are updated.
     * @param videoId Id of the video (required)
     * @param videoProperties  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Video update accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void updateVideoById(String videoId, VideoProperties videoProperties) throws ApiException {
        updateVideoByIdWithHttpInfo(videoId, videoProperties);
    }

    /**
     * Update an existing video
     * Update video properties  Only properties provided are updated.
     * @param videoId Id of the video (required)
     * @param videoProperties  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Video update accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateVideoByIdWithHttpInfo(String videoId, VideoProperties videoProperties) throws ApiException {
        okhttp3.Call localVarCall = updateVideoByIdValidateBeforeCall(videoId, videoProperties, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an existing video (asynchronously)
     * Update video properties  Only properties provided are updated.
     * @param videoId Id of the video (required)
     * @param videoProperties  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Video update accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid or incomplete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVideoByIdAsync(String videoId, VideoProperties videoProperties, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVideoByIdValidateBeforeCall(videoId, videoProperties, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
