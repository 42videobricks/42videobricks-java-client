/*
 * 42videobricks
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.api42videobricks.client.api;

import com.api42videobricks.client.ApiException;
import com.api42videobricks.client.models.Error;
import com.api42videobricks.client.models.Playlist;
import com.api42videobricks.client.models.PlaylistList;
import com.api42videobricks.client.models.PlaylistProperties;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlaylistsApi
 */
@Disabled
public class PlaylistsApiTest {

    private final PlaylistsApi api = new PlaylistsApi();

    /**
     * Add a new playlist
     *
     * Create a new playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPlaylistTest() throws ApiException {
        PlaylistProperties playlistProperties = null;
        Playlist response = api.addPlaylist(playlistProperties);
        // TODO: test validations
    }

    /**
     * Delete a playlist
     *
     * Delete a playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePlaylistByIdTest() throws ApiException {
        String playlistId = null;
        api.deletePlaylistById(playlistId);
        // TODO: test validations
    }

    /**
     * Retun a single playlist
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlaylistByIdTest() throws ApiException {
        String playlistId = null;
        Playlist response = api.getPlaylistById(playlistId);
        // TODO: test validations
    }

    /**
     * List playlists
     *
     * Return the list of playlist.  Return an empty list it there is no playlist to return.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlaylistsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String search = null;
        String sort = null;
        PlaylistList response = api.getPlaylists(limit, offset, search, sort);
        // TODO: test validations
    }

    /**
     * Update an existing playlist
     *
     * Update a existing playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePlaylistByIdTest() throws ApiException {
        String playlistId = null;
        PlaylistProperties playlistProperties = null;
        api.updatePlaylistById(playlistId, playlistProperties);
        // TODO: test validations
    }

}
